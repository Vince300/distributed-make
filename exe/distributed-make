#!/usr/bin/env ruby

require "rubygems"
require "commander/import"
require "logger"

# Load distributed_make gem
$LOAD_PATH.unshift(File.expand_path(File.join(__FILE__, "../../lib")))
require "distributed_make"

# Initialize logger
logger = Logger.new(STDOUT)

program :name, 'distributed-make'
program :version, DistributedMake::VERSION
program :description, 'Distributed Make entry point'
program :help, 'Authors', DistributedMake::AUTHORS.zip(DistributedMake::AUTHOR_EMAILS).map { |item| "#{item[0]} <#{item[1]}>"}.join("\n" + " " * 4)

# The default command should be the distrubted make driver, so we can just "distributed-make" from a directory
default_command :driver

# Hostname is a global option for all commands
global_option('--host HOSTNAME[:PORT]', String, 'Hostname to use for dRuby')
global_option('--log FILENAME', String, 'Log output file name. Defaults to STDOUT') do |arg|
  logger = Logger.new(arg)
end

command :driver do |c|
  c.syntax = 'distributed-make driver [options]'
  c.summary = 'Start building a Makefile on a worker pool'
  c.description = <<-EOT
  Using the default configuration, running `distributed-make` in a folder
  containing a Makefile should distribute the building process accross all
  workers that will register with this driver process.

  Options may be used to alter the behavior depending on the current setup.
  EOT
  c.example 'Run the driver listening on all addresses', 'distributed-make driver'
  c.example 'Run the driver listening on localhost', 'distributed-make driver --host localhost'
  c.example 'Run the driver listening on localhost, with a specific port', 'distributed-make driver --host localhost:12345'
  c.option '--period SECONDS', Integer, 'Tuple space cleanup period, defaults to 5 seconds'
  c.option '-f MAKEFILE', String, 'Name of the makefile to process, defaults to Makefile'
  c.option '-n', '--dry-run', 'Enable dry-run mode to test workers'
  c.action do |args, options|
    # Setup defaults
    options.default period: 5, f: 'Makefile'

    # The name of the Makefile to process
    filename = options.f

    # Check wanted rule specification
    wanted_rule = nil
    if args.length > 1
      logger.error("multiple top-level rules are not supported")
      break
    else
      wanted_rule = args.first
    end

    begin
      contents = File.read(filename)

      # Parse the input Makefile
      logger.info("parsing #{filename}")
      ast = DistributedMake::Parser.parse(contents, filename)

      logger.info("preparing tree for #{filename}")

      # Transform it into the associated dependency tree
      tree = DistributedMake::TreeBuilder.build_tree(ast, filename, wanted_rule)

      # Check we have something to do
      if tree.nil?
        if wanted_rule
          raise DistributedMake::Error.new("#{wanted_rule} not found in Makefile, cannot continue")
        else
          logger.info("nothing to be done")
          break
        end
      end

      # Compute the job name
      job_name = File.dirname(File.expand_path(Dir.getwd))

      # Start the Makefile driver
      driver = DistributedMake::Agents::Driver.new(logger)
      driver.run(options.host, job_name, options.dry_run, options.period) do |agent|
        # Tell the agent to start processing the current tree
        agent.make_tree(tree)
      end
    rescue Errno::ENOENT
      logger.error("#{filename} not found")
    rescue DistributedMake::Error => e
      # Abort, "expected" class of errors
      logger.error(e.message)
    rescue StandardError => e
      # Unexpected error occurred
      logger.fatal(e)
    end
  end
end

command :worker do |c|
  c.syntax = 'distributed-make worker [options]'
  c.summary = 'Start a distributed make worker process'
  c.description = ''
  c.example 'Run the worker listening on all addresses', 'distributed-make worker'
  c.example 'Run the worker listening on localhost', 'distributed-make worker --host localhost'
  c.example 'Run the worker listening on localhost, with a specific port', 'distributed-make worker --host localhost:12345'
  c.option '--name NAME', String, 'Name of the worker instance. Defaults to worker'
  c.action do |args, options|
    options.default name: 'worker'

    driver = DistributedMake::Agents::Worker.new(options.name, logger)
    driver.run(options.host) do |agent|
      # Tell the agent to wait for work
      agent.process_work
    end
  end
end

